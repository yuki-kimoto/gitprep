#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../extlib/lib/perl5";
use Gitprep::RPC;

my $debug = 0;
my $channel_fileno = 99;  # File descriptor number for RPC channel.

# Retrieve our parameters
my ($session_user_id, $user_id, $project_id) =
  @ENV{'GITPREP_SESSION_USER', 'GITPREP_USER', 'GITPREP_PROJECT'};

die "Gitprep parameters unset" unless $session_user_id && $user_id && $project_id;

# Establish the RPC connection.
open my $channel, "+<&=$channel_fileno" or die "Can't open request channel\n";
my $rpc = Gitprep::RPC->new(sub {syswrite $channel, shift});

sub rpc_call {
  $rpc->request(@_);
  my ($input, $result, $error, $gotit);
  while (!$gotit) {
    sysread $channel, $input, 2048 or die "Gitprep shell has exited\n";
    $rpc->feed($input);
    ($result, $error, $gotit) = $rpc->result;
  }
  die $error if $error;
  return $result;
}

my $rules = rpc_call('manager->rules');

my $rep_info = rpc_call('rep_info($user_id, $project_id)',
  user_id => $user_id,
  project_id => $project_id
);
my $default_branch = rpc_call('git->current_branch($rep_info)',
  rep_info => $rep_info
);
my $project_row_id = rpc_call('dbi->model("project")->select("project.row_id",'.
  'where => $where)->value',
  where => {
    'user.id' => $user_id,
    'project.id' => $project_id
  }
);

# Read project's active rulesets.
my %where = (
  project => $project_row_id,
  active => 1
);
$where{owner_bypass} = 0 if $session_user_id eq $user_id;
my $rulesets = rpc_call('dbi->model("ruleset")->select(where => $where,' .
  'append => "order by name")->all',
  where => \%where
);
foreach my $ruleset (@$rulesets) {
  $ruleset->{selector} = rpc_call('manager->compile_ruleset_selectors(' .
    '$ruleset_row_id, $default_branch)',
    ruleset_row_id => $ruleset->{row_id},
    default_ranch => $default_branch
  );
}

# Check updates.
my $exit_status = 0;
while (<>) {
  chomp;
  die "Invalid update data" unless $_ =~
    m#^([0-9a-f]{40})\s([0-9a-f]{40})\s(refs/(tags|heads|remotes)/(\S+))$#i;
  my ($old, $new, $ref, $kind, $name) = ($1, $2, $3, $4, $5);
  next if $kind eq 'remotes';   # No remote check.
  $kind = $kind eq 'tags'? 'tag': 'branch';
  $old =~ s/0{40}//;
  $new =~ s/0{40}//;

  # Gather the checks to perform.
  my %checks;
  foreach my $ruleset (@$rulesets) {
    if ($ruleset->{target} eq $kind &&
      rpc_call('manager->ruleset_selected($selector, $name)',
        selector => $ruleset->{selector},
        name => $name)) {
      foreach my $rule (@$rules) {
        push @{$checks{$rule->{id}}}, $ruleset->{name} if
          $ruleset->{$rule->{id}};
      }
    }
  }

  # Perform the checks and issue messages.
  my $index = 0;
  foreach my $rule (@$rules) {
    my $check = $checks{$rule->{id}};
    if ($check && rpc_call('manager->rules->[$index]->{check}->(@$checkargs)',
      index => $index,
      checkargs => [$rep_info, $old, $new, $ref])
    ) {
      $exit_status = 1;
      print "$kind '$name'$rule->{error} forbidden by ";
      print rpc_call('gitprep_api->plural("ruleset", $count)',
        count => scalar(@$check));
      print ' ' . join(', ', @$check) . ".\n";
    }
  $index++;
  }
}

exit $exit_status;
