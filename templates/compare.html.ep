<%
  # API
  my $api = gitprep_api;
  
  # Git
  my $git = app->git;

  # Parameters
  my $base_user_id = param('user');
  my $base_project_id = param('project');
  my $base_branch = param('rev1');
  my $rev2 = param('rev2');
  my $page = param('page') || 0;
  my $expand = param('expand');

  my $target_user_id;
  my $target_project_id;
  my $target_branch;

  local *new_rev2 = sub {
    my %args = (
      base_user_id => $base_user_id,
      base_project_id => $base_project_id,
      target_user_id => $target_user_id,
      target_project_id => $target_project_id,
      target_branch => $target_branch,
      @_
    );

    return $args{target_branch} if $args{target_user_id} eq $args{base_user_id} && $args{target_project_id} eq $args{base_project_id};
    return "$args{target_user_id}:$args{target_branch}" if $args{target_project_id} eq $args{base_project_id};
    return "$args{target_user_id}:$args{target_project_id}:$args{target_branch}";
  };

  # Base project
  my $base_project = app->dbi->model('project')->select(
    [
      {__MY__ => '*'},
      {user => ['id']}
    ],
    where => {'project.id' => $base_project_id, 'user.id' => $base_user_id}
  )->one;

  # Base branches
  my $base_rep_info = app->rep_info($base_user_id, $base_project_id);
  my $base_branches = $git->branches($base_rep_info);

  # If no branch yet, redirect to project page which will display info
  # to populate repository.
  if (!@$base_branches) {
    $self->redirect_to("/$base_user_id/$base_project_id");
    return;
  }

  # Get target user, project, branch
  if (defined $rev2 && $rev2 =~ /^(?:([^:]+):(?:([^:]+):)?)?(.+)$/) {
    $target_user_id = $1;
    $target_project_id = $2;
    $target_branch = $3;
  }

  # Default base branch
  if (!defined $base_branch) {
    $base_branch = $git->current_branch($base_rep_info);

    # If neither base branch nor target repository was given, redirect to
    # original project compare.
    if($base_project->{original_project} && !$target_user_id && !$target_project_id) {
      $target_user_id = $base_user_id;
      $target_project_id = $base_project_id;
      $target_branch //= $base_branch;

      my $original_project = app->dbi->model('project')->select(
        [
          {__MY__ => '*'},
          {user => ['id']}
        ],
        where => {'project.row_id' => $base_project->{original_project}}
      )->one;
      $base_user_id = $original_project->{'user.id'};
      $base_project_id = $original_project->{'id'};
      $base_branch = $git->current_branch(app->rep_info($base_user_id, $base_project_id));
      my $new_rev2 = new_rev2();
      $self->redirect_to("/$base_user_id/$base_project_id/compare/$base_branch...$new_rev2");
      return;
    }
  }

  # Target project
  $target_user_id //= $base_user_id;
  $target_project_id //= $base_project_id;
  $target_branch //= $base_branch;
  my $target_project = app->dbi->model('project')->select(
    [
      {__MY__ => '*'},
      {user => ['id']}
    ],
    where => {'project.id' => $target_project_id, 'user.id' => $target_user_id}
  )->one;
  my $bad_params = !$target_project;

  # Target branches
  my $target_rep_info = app->rep_info($target_user_id, $target_project_id);
  my $target_branches = [];
  $target_branches = $git->branches($target_rep_info) unless $bad_params;

  # Branches must exist.
  $bad_params |= !(grep {$_->{name} eq $base_branch} @$base_branches) ||
    !(grep {$_->{name} eq $target_branch} @$target_branches);

  # Pre-existing pull request
  my $pull_request_already = app->dbi->model('pull_request')->select(
    where => {
      base_project => $base_project->{row_id},
      base_branch => $base_branch,
      target_project => $target_project->{row_id},
      target_branch => $target_branch
    }
  )->one;
  
  my $errors;
  if (lc $self->req->method eq 'post') {
  
    my $op = param('op');
    
    if ($op eq 'create-pull-request') {
      
      if ($pull_request_already) {
        $self->reply->exception("Error");
        return;
      }

      # Parameters
      my $title = param('title');
      my $message = param('message');

      # Validation
      my $vc = app->vc;
      my $validation = $vc->validation;

      # Access control
      if (!$api->logined) {
        $validation->add_failed(authorization => 'please log-in first');
      }

      # Check title
      if (!(defined $title && length $title)) {
        $validation->add_failed(title => 'title is empty');
      }
      elsif (length $title > 300) {
        $validation->add_failed(title => 'title is too long');
      }

      # Message
      $message //= '';
      if (length $message > 1000) {
        $validation->add_failed(message => 'message is too long');
      }

      if (!$bad_params && $validation->is_valid) {
        my $now_epoch = $api->now;
        my $session_user_row_id = $api->session_user_row_id;
        my $issue_number;
        app->dbi->connector->txn(sub {

          # New pull request
          my $new_pull_request = {
            base_project => $base_project->{row_id},
            base_branch => $base_branch,
            target_project => $target_project->{row_id},
            target_branch => $target_branch,
          };

          # last pull request row id
          app->dbi->model('pull_request')->insert($new_pull_request);
          my $new_pull_request_row_id = app->dbi->execute("select LAST_INSERT_ROWID()")->value;

          # issue number
          $issue_number = app->dbi->model('issue')->select(
            'max(number)',
            where => {project => $base_project->{row_id}},
            append => 'group by project'
          )->value;
          $issue_number++;

          # New issue
          my $new_issue = {
            title => $title,
            open => 1,
            open_time => $now_epoch,
            open_user => $session_user_row_id,
            pull_request => $new_pull_request_row_id,
            project => $base_project->{row_id},
            number => $issue_number
          };
          app->dbi->model('issue')->insert($new_issue);
          my $new_issue_row_id = app->dbi->execute("select LAST_INSERT_ROWID()")->value;

          # New issue message
          my $new_issue_message = {
            issue => $new_issue_row_id,
            number => 1,
            message => $message,
            create_time => $now_epoch,
            update_time => $now_epoch,
            user => $session_user_row_id
          };
            
          app->dbi->model('issue_message')->insert($new_issue_message);

          $self->redirect_to("/$base_user_id/$base_project_id/pull/$issue_number");
          return;
        });
      }
      else {
        $errors = $validation->messages;
      }
    }
  }

  push @$errors, 'Choose different branches and/or forks below to discuss and review changes.' if $bad_params;

  # Can merge
  my $merge_success;

  # Create working repository if it doesn't exist
  $self->app->manager->create_work_rep($base_user_id, $base_project_id);

  my $commits = [];
  my $start_commit_id;
  my $end_commit_id;
  my $work_rep_info;
  if (!$bad_params) {
    # Lock working repository
    $work_rep_info = app->work_rep_info($base_user_id, $base_project_id);
    {
      my $lock_fh = $self->app->manager->lock_rep($work_rep_info);

      # Prepare merge
      $self->app->manager->prepare_merge(
        $work_rep_info,
        $base_rep_info,
        $base_branch,
        $target_rep_info,
        $target_branch
      );

      # Check merge automatically
      $merge_success = $self->app->manager->merge(
        $work_rep_info,
        $target_rep_info,
        $target_branch
      );
    }

    # Commits
    $commits = $git->forward_commits(
      $work_rep_info,
      $base_rep_info,
      $base_branch,
      $target_rep_info,
      $target_branch
    );

    # Start commit
    $start_commit_id = app->manager->merge_base($work_rep_info, $base_branch,
      $target_rep_info, $target_branch);

    # End commit
    $end_commit_id = app->git->ref_to_object_id($target_rep_info, $target_branch);

    if (!$start_commit_id || !$end_commit_id) {
      $self->reply->not_found;
      return;
    }
  }

  my $commits_count = @$commits;
  my $last_commit_date = $commits_count? $commits->[0]->{committer_epoch}: 0;
  my $authors = {};
  for my $commit (@$commits) {
    $authors->{$commit->{author}} = 1;
  }
  my $authors_count = keys %$authors;

  # Member projects
  my $member_projects = app->manager->member_projects($base_user_id, $base_project_id);
  
  # Can open pull request
  my $can_open_pull_request;
  if (@$commits && $expand) {
    $can_open_pull_request = 1;
  }
  
  # commit_body args
  my %commit_body_args = (
    user => $target_user_id,
    project => $target_project_id,
    rep_info => $work_rep_info,
    rev => $end_commit_id,
    from_rev => $start_commit_id
  );

  layout 'common', title => "Comparing $base_branch...$target_branch \x{b7} $base_user_id/$base_project_id";
%>


%= javascript begin
  $(document).ready(function () {

    // Change base fork
    $('#base-fork-btn').on('click', function () {
      $('#base-fork-popup')
        .css('display', 'block')
        .css('top', '40px')
        .css('left', $(this).position().left)
      ;
    });
    $('#base-fork-popup').on('click', function () {
      $('#base-fork-popup').css('display', 'none');
    });
    // close popup
    $(document).click(function() { $('#base-fork-popup').hide(); });
    $('#base-fork-btn').click(function() { event.stopPropagation(); });
    $('#base-fork-popup').click(function() { event.stopPropagation(); });


    // Change head fork
    $('#head-fork-btn').on('click', function () {
      $('#head-fork-popup')
        .css('display', 'block')
        .css('top', '40px')
        .css('left', $(this).position().left)
      ;
    });
    $('#head-fork-popup').on('click', function () {
      $('#head-fork-popup').css('display', 'none');
    });
    // close popup
    $(document).click(function() { $('#head-fork-popup').hide(); });
    $('#head-fork-btn').click(function() { event.stopPropagation(); });
    $('#head-fork-popup').click(function() { event.stopPropagation(); });

    // Change base branch
    $('#base-branch-btn').on('click', function () {
      $('#base-branch-popup')
        .css('display', 'block')
        .css('top', '40px')
        .css('left', $(this).position().left)
      ;
    });
    $('#base-branch-close').on('click', function () {
      $('#base-branch-popup').css('display', 'none');
    });
    $('[name=base-branch]').on('keypress', function (e) {
      // Enter
      if (e.which == 13) {
        location.href = '<%= url_for("$base_user_id/$base_project_id/compare/") %>' + $(this).val() + '...<%= new_rev2() . ($expand? '?expand=1': '') %>';
      }
    });
    // close popup
    $(document).click(function() { $('#base-branch-popup').hide(); });
    $('#base-branch-btn').click(function() { event.stopPropagation(); });
    $('#base-branch-popup').click(function() { event.stopPropagation(); });
    
    // Change compare branch
    $('#target-branch-btn').on('click', function () {
      $('#target-branch-popup')
        .css('display', 'block')
        .css('top', '40px')
        .css('left', $(this).position().left)
      ;
    });
    $('#target-branch-close').on('click', function () {
      $('#target-branch-popup').css('display', 'none');
    });
    $('[name=target-branch]').on('keypress', function (e) {
      // Enter
      if (e.which == 13) {
        var href = '<%= url_for("/$base_user_id/$base_project_id/compare/") %>' + '<%= $base_branch %>...<%= new_rev2(target_branch => '') %>' + $(this).val();
        % if ($expand) {
          href = href + '?expand=1';
        % }
        location.href = href;
      }
    });
    // close popup
    $(document).click(function() { $('#target-branch-popup').hide(); });
    $('#target-branch-btn').click(function() { event.stopPropagation(); });
    $('#target-branch-popup').click(function() { event.stopPropagation(); });

    %= include '/include/add_issue_form_js';
  });
% end

%= javascript begin
  $(document).ready(function () {
    $('#comapre-across-btn').on('click', function () {
      $('#base-fork-btn').toggle();
      $('#head-fork-btn').toggle();
    });
  });
% end

%= include '/include/header';

<div class="container">
  %= include '/include/errors', errors => $errors;
  
  <div class="topic1">
    % if ($can_open_pull_request) {
      Open a pull request
    % } else {
      Compare changes
    % }
  </div>
  <div class="compare-desc">
    Compare changes across branches, commits, tags, and more below. If you need to, you can also <a href="javascript:void(0)" id="comapre-across-btn">compare across forks</a>.
  </div>
  <div class="compare-select">
    <div>
      <div>
        <div style="display:inline-block">
          <button id="base-fork-btn" class="btn btn-small" style="<%= $base_user_id eq $target_user_id && $base_project_id eq $target_project_id? 'display:none' : '' %>">
            <span>base repository:</span><b> <%= $base_user_id %>/<%= $base_project_id %></b>
            %= $api->icon('arrow-down');
          </button>
          <button id="base-branch-btn" class="btn btn-small">
            <span>base:</span><b> <%= $base_branch %></b>
            %= $api->icon('arrow-down');
          </button>
        </div>
        <div style="display:inline-block;line-height:0px;">
          %= $api->icon('arrow-left');
          <br />...
        </div>
        <div style="display:inline-block;margin-top:10px;">
          <button id="head-fork-btn" class="btn btn-small" style="<%= $base_user_id eq $target_user_id && $base_project_id eq $target_project_id? 'display:none' : '' %>">
            <span>head repository:</span><b> <%= $target_user_id %>/<%= $target_project_id %></b>
            %= $api->icon('arrow-down');
          </button>
          <button id="target-branch-btn" class="btn btn-small">
            <span>compare:</span> <b><%= $target_branch %></b>
            %= $api->icon('arrow-down');
          </button>

          % if ($can_open_pull_request) {
            % if ($merge_success) {
              <span style="margin-left:10px">
                <span style="color:green;font-weight:bold"><%= "\x{2714}" %>Able to merge.</span> These branches can be automatically merged.
              </span>
            % } else {
              <span style="margin-left:10px">
                <span style="color:red;font-weight:bold">Not able to merge.</span> These branches can't be automatically merged.
              </span>
            % }
          % }
        </div>
      </div>
    </div>

    <div id="base-branch-popup" style="display:none;width:330px;position:absolute">
      <div class="radius-top border-gray" style="background:#E6E6FA;padding:10px">
        <div style="overflow:hidden">
          <div style="float:left;width:90%;">
            <b>Choose a base branch</b>
          </div>
          <div style="float:left:width:10%;text-align:right;">
            %= $api->icon('x-circle', id => 'base-branch-close');
          </div>
        </div>
      </div>
      <div class="border-gray" style="background:#F5F5F5;border-top:none;border-bottom:none;text-align:center;padding:10px 0">
        %= text_field 'base-branch', style => 'margin-bottom:0;width:270px', placeholder => 'Branch, tag, commit, or history marker';
      </div>
      <div style="background:white;max-height:500px;overflow:auto;">
        <ul class="nav nav-tabs nav-stacked">
          % for (my $i = 0; $i < @$base_branches; $i++) {
            % my $branch = $base_branches->[$i];
              <li>
                <%
                  my $url = new_rev2();
                  $url = url_with("/$base_user_id/$base_project_id/compare/$branch->{name}...$url");
                %>
                <a style="border-top-left-radius:0px;border-top-right-radius:0px;"
                  href="<%= $url  %>">
                  <%= $branch->{name} %>
                </a>
              </li>
          % }
        </ul>
      </div>
    </div>

    <div id="target-branch-popup" style="display:none;width:330px;position:absolute">
      <div class="radius-top border-gray" style="background:#E6E6FA;padding:10px">
        <div style="overflow:hidden">
          <div style="float:left;width:90%;">
            <b>Choose a compare branch</b>
          </div>
          <div style="float:left:width:10%;text-align:right;">
            %= $api->icon('x-circle', id => 'target-branch-close');
          </div>
        </div>
      </div>
      <div class="border-gray" style="background:#F5F5F5;border-top:none;border-bottom:none;text-align:center;padding:10px 0">
        %= text_field 'target-branch', style => 'margin-bottom:0;width:270px', placeholder => 'Branch, tag, commit, or history marker';
      </div>
      <div style="background:white;max-height:500px;overflow:auto;">
        <ul class="nav nav-tabs nav-stacked">
          % for (my $i = 0; $i < @$target_branches; $i++) {
            % my $target_branch = $target_branches->[$i];
              <li>
                <%
                  my $url = new_rev2(target_branch => $target_branch->{name});
                  $url = url_with("/$base_user_id/$base_project_id/compare/$base_branch...$url");
                %>
                <a style="border-top-left-radius:0px;border-top-right-radius:0px;" href="<%= $url %>">
                  <%= $target_branch->{name} %>
                </a>
              </li>
          % }
        </ul>
      </div>
    </div>


    <div id="base-fork-popup" style="display:none;width:330px;position:absolute">
      <div class="radius-top border-gray" style="background:#E6E6FA;padding:10px">
        <div style="overflow:hidden">
          <div style="float:left;width:90%;">
            <b>Choose a base fork</b>
          </div>
          <div style="float:left:width:10%;text-align:right;">
            %= $api->icon('x-circle', id => 'member-project-close');
          </div>
        </div>
      </div>
      <div style="background:white;max-height:500px;overflow:auto;">
        <ul class="nav nav-tabs nav-stacked">
          % for (my $i = 0; $i < @$member_projects; $i++) {
            % my $member_project = $member_projects->[$i];
              <%
                my $member_user_id = $member_project->{'user.id'};
                my $member_project_id = $member_project->{id};
              %>
              <li>
                <%
                  my $url = new_rev2(base_user_id => $member_user_id, base_project_id => $member_project_id);
                  $url = url_with("/$member_user_id/$member_project_id/compare/$base_branch...$url");
                %>
                <a style="border-top-left-radius:0px;border-top-right-radius:0px;" href="<%= $url %>">
                  <%= $member_user_id %>/<%= $member_project_id %>
                </a>
              </li>
          % }
        </ul>
      </div>
    </div>




    <div id="head-fork-popup" style="display:none;width:330px;position:absolute">
      <div class="radius-top border-gray" style="background:#E6E6FA;padding:10px">
        <div style="overflow:hidden">
          <div style="float:left;width:90%;">
            <b>Choose a head fork</b>
          </div>
          <div style="float:left:width:10%;text-align:right;">
            %= $api->icon('x-circle', id => 'member-project-close');
          </div>
        </div>
      </div>
      <div style="background:white;max-height:500px;overflow:auto;">
        <ul class="nav nav-tabs nav-stacked">
          % for (my $i = 0; $i < @$member_projects; $i++) {
            % my $member_project = $member_projects->[$i];
              <%
                my $member_user_id = $member_project->{'user.id'};
                my $member_project_id = $member_project->{id};
              %>
              <li>
                <%
                  my $url = new_rev2(target_user_id => $member_user_id, target_project_id => $member_project_id);
                  $url = url_with("/$base_user_id/$base_project_id/compare/$base_branch...$url");
                %>
                <a style="border-top-left-radius:0px;border-top-right-radius:0px;" href="<%= $url %>">
                  <%= $member_user_id %>/<%= $member_project_id %>
                </a>
              </li>
          % }
        </ul>
      </div>
    </div>
  </div>
  
  % if ($pull_request_already) {
    <%
      my $issue = app->dbi->model('issue')->select(
        where => {
          project => $base_project->{row_id},
          pull_request => $pull_request_already->{row_id}
        }
      )->one;
    %>
    
    <div class="compare-pull-request-link">
      <a href="<%= url_for("/$base_user_id/$base_project_id/pull/$issue->{number}") %>">
        Pull request #<%= $issue->{number} %>
      </a>
    </div>
  % } elsif (@$commits && $merge_success) {
    <div class="issue-add-comment" style="width:80%">
      <form action="<%= url_for %>" method="post">
        <%= hidden_field op => 'create-pull-request' %>
        <div class="issue-add-comment-header">
          <div class="issue-add-comment-title">
            <%= text_field 'title' => $commits->[0]{title_short} %>
          </div>
          <div class="issue-message-write-tab issue-add-comment-header-tab"><a href="javascript:void(0)">Write</a></div>
          <div class="issue-message-preview-tab issue-add-comment-header-tab"><a class="disable" href="javascript:void(0)">Preview</a></div>
          %= include '/include/issue_comment_icon';
        </div>
        <div class="issue-add-comment-body">
          <div class="issue-message-write-area issue-add-comment-message">
            <%= text_area 'message' %>
          </div>
          <div class="issue-message-preview-area issue-add-comment-preview markdown-body" style="padding:10px">
          </div>
          <div class="issue-add-comment-bottom">
            <div class="issue-add-comment-button-left">
              Styling with Markdown is supported
            </div>
            <div class="issue-add-comment-button">
              <input type="submit" value="Create pull request" class="btn btn-green" />
            </div>
          </div>
        </div>
      </form>
    </div>
  % }

  % if (@$commits) {
    <ul class="compare-header">
      <li>
        %= $api->icon('git-commit');
        <%= $api->plural('commit', scalar(@$commits), 'no') %>
      </li>
      <li>
        %= $api->icon('organization');
        <%= $api->plural('contributor', $authors_count, 'no') %>
      </li>
      <li>
        
      </li>
      <li>
        
      </li>
    </ul>
    
    <div class="commits">
      <div class="commits-container">
        <div class="commit-date">
          %= $api->icon('git-commit', style => 'margin-right: 8px');
          <span class="date-text">
            Commits not after <%= $api->strftime($last_commit_date, '%F') %>
          </span>
        </div>
        <ul class="commits-date-container">
          % for my $commit (@$commits) {
            %= include '/include/commit_ref', user_id => $target_user_id, project_id => $target_project_id, commit => $commit;
          % }
        </ul>
      </div>
    </div>

    %= javascript begin
      Gitprep.commitsByDay($('.commits-container'));
    % end
  
    %= include '/include/commit_body', %commit_body_args;
  % } else {
    <div class="compare-nothing">
      <div>
        <b><big>There isn't anything to compare.</big></b>
      </div>
      <div>
        <b>
          <%= $base_branch %></b> is up to date with all commits from
          <b><%= $target_branch %></b>.
          Try <a href="<%= url_for("/$base_user_id/$base_project_id/compare/$target_branch...$target_user_id:$target_project_id:$base_branch") %>">switching the base</a> for your comparison.
      </div>
    </div>
  % }
</div>
%= include '/include/footer';
